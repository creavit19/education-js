// Ссылка внутри функции на саму себя
// Как получить ссылку на анонимную функцию внутри неё?
// По логике js если функция определяется ключевым словом function,
// то в её описании конструкция: me = (function(){return this})();
// должна вернуть эту ссылку. Но похоже разработчики движка это не учли,
// Ссылка получается на глобальный объект.
// Я решил назвать её me :)
// Это может быть полезно для организации рекурсии в анонимной функции.

// ---------------------------------------------------
// Забаный пример когда функция ретурнит саму себя:
// Создадим конструктор объекта с методом, добавляющим экземпляру объекта
// свойство со случайным именем и значением
function construct() {
  this.addField = () => {
    this[rndStr(5)] = rndNum(0, 100);
    return this.addField;
  }
};
// Создаём экземпляр объекта
obj = new construct();
// Вызываем метод, при этом сколько пар круглых скобок мы поставим в конце,
// столько раз он будет вызван, в данном случае добавится 5 полей.
obj.addField()()()()();
// Выведем эти поля объекта:
for (const prop in obj) {
  if(typeof obj[prop] != 'function') {
    console.log(`${prop} = ${obj[prop]}`);
  }
}
//---------------------------------------------------------

// Классический пример рекурсии
// Чтобы рекурсия имела смысл, она обязательно должна содержать
// хотябы один базовый случай, иначе будет бесконечный цикл

// Вычисление факториала при помощи рекурсивной функции
function factorial(n) {
  if(n == 1) return 1; // - базовый случай
  return n * factorial(n - 1); 
}

console.log(factorial(5));
// Ответ 120
//---------------------------------------------------------

// Вспомогательные функции
//---------------------------------------------------------
// Функция возвращает случайное целое число в заданном промежутке
function rndNum(from, to) {
  return Math.round((to - from) * Math.random()) + from;
}
// Функция возвращает строку из случайных прописных латинских букв заданной длины
function rndStr(length) {
  let arr = [];
  for(let i = 0; i < length; i++) {
    arr.push(rndNum(97, 122));
  }
  return String.fromCodePoint(...arr);
}
//---------------------------------------------------------
